
**** Exercises week 5 ***

Your profile
-----------
- If you're new to programming, 1-4 will prepare for lab4
  (do at least 1-2). As usual, can't spend all your time here. Do left over exercises
  later or as exam recap.

Exercises
---------

1.  See ex1useaclass directory. Implement the class Rational so that all tests
    in Ex1TestRational pass.

    TIP: Always store rationals in shortest form,
    https://en.wikipedia.org/wiki/Euclidean_algorithm

    TIP: It's possible to generate the equals and hashCode methods (possibly modify
    and/or clean up a bit)

2.  See ex2usemoreclasses. Implement classes Point and Triangle so that all test
    in Ex2TestPointTriangle passes. Triangle should use Point and should use Herons
    formula to calculate the area, See https://en.wikipedia.org/wiki/Heron%27s_formula

3.  See Ex3Theory. Uncomment and answer questions. Write answer here
    1. true, false, false, true, false, false
       First we give p3 the reference pointer of p1, so they point to the same thing.
       Then we replace the reference pointer in p1 with the pointer of p2.
       So they have the same value, while p3 point to a different object which got other values for x and y.
    2. 10, The class got loads of overloaded methods, depending on what type of argument
       we send into the method we will get a different result.
    3. 9, and we are dealing with 5 object. Each time we call doIt it returns a new object of
       of the same class and adds 1 to i in the argument, and then doIt is called on that object.
    4. 8 will be printed, becasue the first time the constructor that takes
       an int will be called and it sets i to the argument. Then the other two
       will use the constructor that takes CCtor objects as arguments.
       The constructor uses the previous i and sets it as its won i.
       And a total of 3 objects are involved.
    5. The first row will give error because we try to assign an instance
       variable to a class variable. And the b does not "exist" in this context.

       Row two assigns the class variable a with a new object and its instance variable b.

       Row 3 then tries to assign the class variable to an instance variable that does not exist.
       because once again we are trying to reach b from the class directly.

       Row 4 creates a new object, not stored, and assign the objects instance variable with the class A variable.

       Row 5 creates a new object (not stored in anything) and we use the new object to
       access the class variable with a new object of class A instances variable b.

       Row 6 Does the same as row 5 but reversed.

       Row 7 does not assign the class A variable a.

       Row 8 On row 2 and 5 we actually assign the class A variable with b, which get initialized as 0.
       so it will print 0.



4.  See directory ex4hangman. Implement a text based object oriented version of the Hangman game
    See: https://en.wikipedia.org/wiki/Hangman_(game).

    - All classes needed are there.
    - Break down and decide which data and which method in which classes.
    - The main class, with the game loop is CLI (also contains all IO)
    - Let CLI do calls on the HangMan class (only) to do the work. Hangman will in
      turn delegate to other objects to fulfill their part of the work.
    - Make a sketch discuss with assistants

    A run of the game outputs:

    Welcome to HangMan, try to guess the word! It's 7 char long
    Enter a char > i

    i _ _ _ _ _ _
    Enter a char > x
    ---|

    i _ _ _ _ _ _
    Enter a char > n
    ---|

    i n _ _ _ n _
    Enter a char > x
    ---|
       |

    i n _ _ _ n _
    Enter a char > x
    ---|
       |
       O

    ... (etc)

    i n _ _ _ n _
    Enter a char > x
    ---|
       |
       O
      /|\
      /
    i n _ _ _ n _
    Enter a char > x
    ---|
       |
       O
      /|\
      / \

    i n _ _ _ n _
    Sorry you lost. Word was: instans

    (if win: Congratulation you made it! Word was ..)


5.  See Ex5SplitList. Implement a method to partition a list into sub lists.
    Optionally make method generic.

6.  See Ex6Grouping. Group a list of Positions (row, col) into sub lists in which all
    positions have the same row. You should use Map/HashMap.